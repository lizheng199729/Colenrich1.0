% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_community_centrality.R
\name{calculate_community_centrality}
\alias{calculate_community_centrality}
\title{Calculate Community Centrality and Generate a GO Enrichment Network Plot}
\usage{
calculate_community_centrality(
  graph,
  community_obj,
  comm_index = 1,
  organism = "Mouse",
  TOP = 10
)
}
\arguments{
\item{graph}{An igraph object representing the complete network.}

\item{community_obj}{A community detection object (e.g., returned by \code{cluster_louvain}) obtained from \code{graph}.}

\item{comm_index}{An integer specifying which community to analyze. Default is 1.}

\item{organism}{A character string specifying the organism. Allowed values are "Human" or "Mouse". Default is "Mouse".}

\item{TOP}{A numeric value indicating the number of top-ranked rows to extract for each centrality measure. Default is 10.}
}
\value{
A list with two components:
\describe{
\item{plotData}{A ggplot object representing the network plot.}
\item{tableData}{A data frame containing the filtered centrality measures for GO terms.}
}
}
\description{
This function performs centrality analysis on a specified community within a graph,
filters GO terms from the resulting centrality measures, extracts the top-ranked GO
terms based on a selected metric, retrieves their ontology information from a specified
organism's annotation database, constructs a bipartite network, and visualizes the network
using ggraph.
}
\details{
The function first computes centrality metrics (degree, betweenness, closeness, and eigenvector centrality)
for the specified community. It then filters nodes corresponding to GO terms (using a pattern match on "GO")
and extracts the top \code{TOP} rows for each centrality metric. The function retrieves the ONTOLOGY information
for these GO terms from the specified organism's annotation database (using \code{AnnotationDbi::select}), constructs
a bipartite network, and visualizes the network using a manual layout generated from a bipartite layout. The edges
are displayed in black, and node aesthetics are mapped based on degree and class.
}
\examples{
\dontrun{
  # Assume 'my_graph' is an igraph object and 'comm' is obtained via cluster_louvain(my_graph)
  result <- calculate_community_centrality(graph = my_graph, community_obj = comm, comm_index = 1,
                                           organism = "Human", TOP = 10)
  print(result$plotData)
  head(result$tableData)
}

}
