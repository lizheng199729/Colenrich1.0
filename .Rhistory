# Check if the specified community index is valid
if (comm_index < 1 || comm_index > length(comm_list)) {
stop("Invalid community index: ", comm_index)
}
# Create a subgraph from the nodes in the specified community
subg <- induced_subgraph(graph, comm_list[[comm_index]])
# Calculate centrality measures
degree_cen <- degree(subg)
betweenness_cen <- betweenness(subg)
closeness_cen <- closeness(subg)
eigenvector_cen <- eigen_centrality(subg)$vector
# Compile the centrality measures into a data frame
centrality_df <- data.frame(
node = V(subg)$name,
degree = degree_cen,
betweenness = betweenness_cen,
closeness = closeness_cen,
eigenvector = eigenvector_cen,
stringsAsFactors = FALSE
)
genefunction <- centrality_df[grepl("GO", centrality_df$node), ]
genefunction$node <- NULL
#作图
top10_list <- apply(genefunction, 2, function(x) {
# 按降序排列，获取排序后对应的索引
idx <- order(x, decreasing = TRUE)
# 取前10个索引
top_idx <- idx[1:TOP]
# 返回一个数据框，包含行名和对应的数值
data.frame(row = rownames(genefunction)[top_idx],
value = x[top_idx],
stringsAsFactors = FALSE)
})
#取出关键列
new_list <- lapply(names(top10_list), function(name) {
df <- top10_list[[name]]
data.frame(row = df$row, sample = name, stringsAsFactors = FALSE)
})
combined_df <- do.call(rbind, new_list)
go_info <- AnnotationDbi::select(OrgDb,
keys = combined_df$row,
columns = c("ONTOLOGY"),
keytype = "GO")
#与combined_df进行匹配
mat1_common <- go_info[match(combined_df$row, go_info$GO), ]
combined_df$ONTOLOGY <- mat1_common$ONTOLOGY
#可视化
edge_data = combined_df[,c("row", "sample", "ONTOLOGY")] %>%
dplyr::rename(from = sample, to = row) %>%
dplyr::select(from, to)
variable_info.sum <- combined_df[,c(1, 3)]
node_data <-
edge_data %>%
dplyr::select(from, to) %>%
tidyr::pivot_longer(cols = c(from, to),
names_to = "Class",
values_to = "node") %>%
dplyr::mutate(
class1 = variable_info.sum$ONTOLOGY[match(node,variable_info.sum$row)]
) %>%
dplyr::select(node, class1) %>%
dplyr::rename(Class = class1) %>%
dplyr::distinct(node, .keep_all = TRUE) %>%
dplyr::arrange(Class) %>%
dplyr::mutate(true_name= node)
node_data$Class[is.na(node_data$Class)] <- "Algorithm"
code_vec <- setNames(as.numeric(factor(node_data$node, levels = node_data$node)),
node_data$node)
edge_data2 <- data.frame(from = code_vec[edge_data$from],
to = code_vec[edge_data$to])
total_graph <-
tidygraph::tbl_graph(nodes = node_data,
edges = edge_data2,
directed = TRUE) %>%
dplyr::mutate(Degree = centrality_degree(mode = 'all'))
pal <- wesanderson::wes_palette(name = "Zissou1", n = 100, type = "continuous")
pal2 <- gplots::colorpanel(300, low = 'steelblue',
mid = "#F9F0D9",
high = 'coral4')
g <- total_graph
V(g)$type <- bipartite_mapping(g)$type
coords <-
create_layout(g, layout = "bipartite") %>%
dplyr::select(x, y)
coords$y[coords$y == 0] <- 0.3
coords <-
coords %>%
dplyr::select(x,y) %>%
dplyr::mutate(theta = x / (max(x) + 1) * 2 * pi,
r = y + 1,
x = r * cos(theta),
y = r * sin(theta))
my_graph <-
create_layout(graph = g,
layout = "manual",
x = coords$x,
y = coords$y
# node.position = coords
)
# 设置颜色模式, 如果想要一一对应，最好给颜色命名：
table(node_data$Class)
value.sum <- c("#436342", "#8f742f", "#d8995b",
"#ad5657", "#c6a58d", "#e4c97d", "#66a9b3",
"#62b2dc", "#765396", "#b5cf70")
plot <-
ggraph(my_graph,
layout = "bipartite") +
geom_edge_link(color = "black", edge_alpha = 1) +
geom_node_point(
aes(fill = Class,
color = Class,
size = Degree),
shape = 21,
show.legend = TRUE
)+
scale_fill_manual(values = value.sum) +
scale_color_manual(values = value.sum) +
# scale_alpha_manual(values = alpha_value.sum) +
geom_node_text(
aes(
x = x * 1.03,
y = y * 1.03,
label = true_name,
hjust = ifelse(Class %in% c("Algorithm"), 'inward', "outward"),
angle = -((-node_angle(x, y) + 90) %% 180) + 90,
size = ifelse(Class %in% c("Algorithm"), 5, 5),
# size = 1,
colour = Class
),repel = FALSE,
# size = 3,
alpha = 1,
show.legend = FALSE,
) +
guides(
edge_width = guide_legend(title = "-log10(BH adjusted P value)",
override.aes = list(shape = NA)),
edge_color = ggraph::guide_edge_colorbar(title = "Effect"),
fill = guide_legend(
title = "Class",
override.aes = list(size = 7, linetype = "blank")
),
size = guide_legend(title = "Degree", override.aes = list(linetype = 0))
) +
# ggraph::scale_edge_color_gradientn(colours = pal2, limits = c(-0.6,0.6)) +
ggraph::scale_edge_color_gradientn(colours = colorRampPalette(c("#5ca995","#f8f1dd","#ca5737"))(30)) +
ggraph::scale_edge_width(range = c(0.1, 1)) +
scale_size_continuous(range = c(1.5, 15)) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)
) +
expand_limits(x = c(-3.2, 3.2), y = c(-3.2, 3.2))
print(plot)
result <- list(plotData = plot, tableData = genefunction)
return(result)
}
#'   stringsAsFactors = FALSE
#' )
#' # For human data, ensure that the org.Hs.eg.db package is installed.
#' result <- Colenrich(gene_data, ID = "ENSEMBL", organism = "Human")
#' print(result$merged_df)
#' print(result$membership_df)
#' print(result$gene_function)
#' }
#'
#' @export
Colenrich <- function(data, ID = "ENSEMBL", organism = "Mouse", resolution = 1.1) {
# Ensure necessary packages are available
if (!requireNamespace("AnnotationDbi", quietly = TRUE)) {
stop("Package 'AnnotationDbi' is required but not installed.")
}
if (!requireNamespace("igraph", quietly = TRUE)) {
stop("Package 'igraph' is required but not installed.")
}
# Load appropriate organism annotation package based on 'organism'
OrgDb <- switch(organism,
"Human" = {
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE)) {
stop("Package 'org.Hs.eg.db' is required for Human data but not installed.")
}
org.Hs.eg.db
},
"Mouse" = {
if (!requireNamespace("org.Mm.eg.db", quietly = TRUE)) {
stop("Package 'org.Mm.eg.db' is required for Mouse data but not installed.")
}
org.Mm.eg.db
},
stop("Unsupported organism. Please use 'Human' or 'Mouse'."))
enrichment_results1 <- list()
enrichment_results2 <- list()
# Process each column (group) in the input data frame
for (col_name in colnames(data)) {
message("Processing group: ", col_name)
# Obtain gene list and remove NA values
gene_list <- na.omit(data[[col_name]])
if (length(gene_list) == 0) {
message("Skipping ", col_name, " - No valid genes.")
next
}
# Retrieve GO annotations using AnnotationDbi::select
gene_annotations <- AnnotationDbi::select(OrgDb,
keys = gene_list,
columns = c("GO"),
keytype = ID)
if (!is.null(gene_annotations) && nrow(gene_annotations) > 0) {
enrichment_results1[[col_name]] <- gene_annotations$GO
enrichment_results2[[col_name]] <- gene_annotations[, 1:2]
}
}
if (length(enrichment_results1) == 0) {
stop("No enrichment results obtained. Please check your input data.")
}
# Identify common GO terms across groups
common_elements <- Reduce(intersect, enrichment_results1)
# Process enrichment results to extract rows corresponding to common GO terms
sig_enrichment <- list()
for (group in names(enrichment_results2)) {
result_df <- as.data.frame(enrichment_results2[[group]])
mat1_common <- result_df[result_df$GO %in% common_elements, ]
sig_enrichment[[group]] <- mat1_common
}
# Merge the enrichment results from all groups
merged_df <- do.call(rbind, sig_enrichment)
# Construct a graph from the merged enrichment results and perform community detection
g <- igraph::graph_from_data_frame(merged_df, directed = FALSE)
community <- igraph::cluster_louvain(g, resolution = resolution)
mod_value <- igraph::modularity(community)
message("Modularity: ", mod_value)
membership_result <- community$membership
membership_df <- data.frame(node = community$names,
community = membership_result,
stringsAsFactors = FALSE)
# Filter for nodes corresponding to GO terms
gene_function <- membership_df[grepl("GO", membership_df$node), ]
# 重新计算社区
la <- igraph::cluster_louvain(g)
# 绘图
plot(la,
g,
vertex.size = 5,
vertex.label.cex = 0.7,
vertex.color = membership(la),
layout = layout_with_fr(g),
main = "GO Enrichment Network and Community Detection")
# Return a list of results
return(list(merged_df = merged_df,
community = community,
membership_df = membership_df,
gene_function = gene_function,
Object_of_drawing = g))
}
setwd('D:/桌面/药物靶点预测文章/Colenrich')
#导入数据
data <- read_excel("示例数据.xlsx")
result <- Colenrich(data,ID = "ENSEMBL",organism = "Human",resolution = 0.5)
library(readxl)
library(tidyverse)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
#导入数据
data <- read_excel("示例数据.xlsx")
result <- Colenrich(data,ID = "ENSEMBL",organism = "Human",resolution = 0.5)
library(igraph)
library(igraph)
result <- Colenrich(data,ID = "ENSEMBL",organism = "Human",resolution = 0.5)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$membership_df)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$membership_df,1)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,1)
library(wesanderson)
library(wesanderson)
library(dplyr)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(wesanderson)
library(gplots)
library(AnnotationDbi)
library(org.Hs.eg.db)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,1)
View(result2)
View(result2[["tableData"]])
#' @examples
#' \dontrun{
#'   # Assume 'my_graph' is an igraph object and 'comm' is obtained via cluster_louvain(my_graph)
#'   result <- calculate_community_centrality(graph = my_graph, community_obj = comm, comm_index = 1,
#'                                            organism = "Human", TOP = 10)
#'   print(result$plotData)
#'   head(result$tableData)
#' }
#'
#' @export
calculate_community_centrality <- function(graph, community_obj, comm_index = 1, organism = "Mouse", TOP = 10) {
# Extract the list of communities from the community detection object
comm_list <- communities(community_obj)
# Load appropriate organism annotation package based on 'organism'
OrgDb <- switch(organism,
"Human" = {
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE)) {
stop("Package 'org.Hs.eg.db' is required for Human data but not installed.")
}
org.Hs.eg.db
},
"Mouse" = {
if (!requireNamespace("org.Mm.eg.db", quietly = TRUE)) {
stop("Package 'org.Mm.eg.db' is required for Mouse data but not installed.")
}
org.Mm.eg.db
},
stop("Unsupported organism. Please use 'Human' or 'Mouse'."))
# Check if the specified community index is valid
if (comm_index < 1 || comm_index > length(comm_list)) {
stop("Invalid community index: ", comm_index)
}
# Create a subgraph from the nodes in the specified community
subg <- induced_subgraph(graph, comm_list[[comm_index]])
# Calculate centrality measures
degree_cen <- degree(subg)
betweenness_cen <- betweenness(subg)
closeness_cen <- closeness(subg)
eigenvector_cen <- eigen_centrality(subg)$vector
# Compile the centrality measures into a data frame
centrality_df <- data.frame(
node = V(subg)$name,
degree = degree_cen,
betweenness = betweenness_cen,
closeness = closeness_cen,
eigenvector = eigenvector_cen,
stringsAsFactors = FALSE
)
# Filter for GO terms from the centrality data
genefunction <- centrality_df[grepl("GO", centrality_df$node), ]
# Remove the node column so that only centrality measures remain for ranking
genefunction$node <- NULL
# Extract the top 'TOP' rows for each centrality metric
top10_list <- apply(genefunction, 2, function(x) {
idx <- order(x, decreasing = TRUE)
top_idx <- idx[1:TOP]
data.frame(row = rownames(genefunction)[top_idx],
value = x[top_idx],
stringsAsFactors = FALSE)
})
# For each centrality measure, extract the row names and add a column indicating the measure (sample)
new_list <- lapply(names(top10_list), function(name) {
df <- top10_list[[name]]
data.frame(row = df$row, sample = name, stringsAsFactors = FALSE)
})
# Combine the results into one data frame
combined_df <- do.call(rbind, new_list)
# Retrieve ONTOLOGY information for the GO terms
go_info <- AnnotationDbi::select(OrgDb,
keys = combined_df$row,
columns = c("ONTOLOGY"),
keytype = "GO")
mat1_common <- go_info[match(combined_df$row, go_info$GO), ]
combined_df$ONTOLOGY <- mat1_common$ONTOLOGY
# Prepare edge data
edge_data <- combined_df[, c("row", "sample", "ONTOLOGY")] %>%
dplyr::rename(from = sample, to = row) %>%
dplyr::select(from, to)
variable_info.sum <- combined_df[, c(1, 3)]
# Build node data by pivoting edge data and merging ontology information
node_data <- edge_data %>%
dplyr::select(from, to) %>%
tidyr::pivot_longer(cols = c(from, to),
names_to = "Class",
values_to = "node") %>%
dplyr::mutate(
class1 = variable_info.sum$ONTOLOGY[match(node, variable_info.sum$row)]
) %>%
dplyr::select(node, class1) %>%
dplyr::rename(Class = class1) %>%
dplyr::distinct(node, .keep_all = TRUE) %>%
dplyr::arrange(Class) %>%
dplyr::mutate(true_name = node)
node_data$Class[is.na(node_data$Class)] <- "Algorithm"
code_vec <- setNames(as.numeric(factor(node_data$node, levels = node_data$node)),
node_data$node)
edge_data2 <- data.frame(from = code_vec[edge_data$from],
to = code_vec[edge_data$to])
# Create a tidygraph object
total_graph <- tidygraph::tbl_graph(nodes = node_data,
edges = edge_data2,
directed = TRUE) %>%
dplyr::mutate(Degree = centrality_degree(mode = 'all'))
# Define color palettes
pal <- wesanderson::wes_palette(name = "Zissou1", n = 100, type = "continuous")
pal2 <- gplots::colorpanel(300, low = 'steelblue',
mid = "#F9F0D9",
high = 'coral4')
g <- total_graph
# Set bipartite mapping
V(g)$type <- bipartite_mapping(g)$type
# Generate a bipartite layout and adjust coordinates
coords <- create_layout(g, layout = "bipartite") %>%
dplyr::select(x, y)
coords$y[coords$y == 0] <- 0.3
coords <- coords %>%
dplyr::mutate(theta = x / (max(x) + 1) * 2 * pi,
r = y + 1,
x = r * cos(theta),
y = r * sin(theta))
my_graph <- create_layout(graph = g,
layout = "manual",
x = coords$x,
y = coords$y)
# Set custom color values for node classes
value.sum <- c("#436342", "#8f742f", "#d8995b",
"#ad5657", "#c6a58d", "#e4c97d", "#66a9b3",
"#62b2dc", "#765396", "#b5cf70")
# Generate the network plot using ggraph
plot_obj <- ggraph(my_graph, layout = "bipartite") +
geom_edge_link(color = "black", edge_alpha = 1) +
geom_node_point(
aes(fill = Class,
color = Class,
size = Degree),
shape = 21,
show.legend = TRUE
) +
scale_fill_manual(values = value.sum) +
scale_color_manual(values = value.sum) +
geom_node_text(
aes(
x = x * 1.03,
y = y * 1.03,
label = true_name,
hjust = ifelse(Class %in% c("Algorithm"), 'inward', "outward"),
angle = -((-node_angle(x, y) + 90) %% 180) + 90,
size = ifelse(Class %in% c("Algorithm"), 5, 5),
colour = Class
),
repel = FALSE,
alpha = 1,
show.legend = FALSE
) +
guides(
edge_width = guide_legend(title = "-log10(BH adjusted P value)",
override.aes = list(shape = NA)),
edge_color = ggraph::guide_edge_colorbar(title = "Effect"),
fill = guide_legend(
title = "Class",
override.aes = list(size = 7, linetype = "blank")
),
size = guide_legend(title = "Degree", override.aes = list(linetype = 0))
) +
ggraph::scale_edge_color_gradientn(colours = colorRampPalette(c("#5ca995", "#f8f1dd", "#ca5737"))(30)) +
ggraph::scale_edge_width(range = c(0.1, 1)) +
scale_size_continuous(range = c(1.5, 15)) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)
) +
expand_limits(x = c(-3.2, 3.2), y = c(-3.2, 3.2))
print(plot_obj)
# Return the plot and the filtered gene function table
result_list <- list(plotData = plot_obj, tableData = genefunction)
return(result_list)
}
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,1)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,1,20)
result2 <- calculate_community_centrality (result$Object_of_drawing,comm_index = 1, organism = "Human", TOP = 20)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,comm_index = 1, organism = "Human", TOP = 20)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,comm_index = 1, organism = "Human", TOP = 50)
usethis::create_package("D:/桌面/药物靶点预测文章/Colenrich")
devtools::document()
data <- read_excel("示例数据.xlsx")
data <- read_excel("Sample Data.xlsx")
View(data)
save(data, file = "D:/桌面/药物靶点预测文章/Colenrich/data.rda")
usethis::create_package("D:/桌面/药物靶点预测文章/Colenrich")
devtools::check()
devtools::check()
devtools::document()
rm(list = c("calculate_community_centrality", "Colenrich"))
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(Colenrich)
library(Colenrich)
Colenrich
source(Colenrich/example_data.rda)
source(Colenrich/data/example_data.rda)
load("Colenrich/data/example_data.rda")
data("example_data", package = "Colenrich")
force(data)
result <- Colenrich(data)
#导入数据
data <- read_excel("示例数据.xlsx")
result <- Colenrich(data)
result <- Colenrich(data,ID = "ENSEMBL",organism = "Human",resolution = 0.5)
View(result)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,comm_index = 1, organism = "Human", TOP = 20)
data("example_data", package = "Colenrich")
result <- Colenrich(data,ID = "ENSEMBL",organism = "Human",resolution = 0.5)
result2 <- calculate_community_centrality (result$Object_of_drawing,result$community,comm_index = 1, organism = "Human", TOP = 20)
